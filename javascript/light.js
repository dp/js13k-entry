// Generated by CoffeeScript 1.12.5
(function() {
  var Light, Msg;

  Light = (function() {
    function Light(lightEl) {
      this.lightEl = lightEl;
      this.on = false;
      this.lightValue = 0;
      this.viewRadius = 0;
      this.alpha = 1.0;
      this.reduction = 8;
      this.tweening = false;
      this.tweenTimePassed = 0;
      this.tweenTime = 0;
      this.tweenTargetRadius = 0;
      this.tweenTargetAlpha = 0;
      this.tweenStartRadius = 0;
      this.tweenStartAlpha = 0;
      this.tweenRadius = 0;
      this.maxDarkRadius = 40;
    }

    Light.prototype.update = function(delta) {
      var multiplier;
      if (this.tweening) {
        this.tweenTimePassed += delta;
        if (this.tweenTimePassed > this.tweenTime) {
          multiplier = 1;
          this.tweening = false;
        } else {
          multiplier = this.tweenTimePassed / this.tweenTime;
        }
        this.viewRadius = (this.tweenTargetRadius - this.tweenStartRadius) * multiplier + this.tweenStartRadius;
        this.alpha = (this.tweenTargetAlpha - this.tweenStartAlpha) * multiplier + this.tweenStartAlpha;
      } else if (this.on) {
        this.lightValue -= this.reduction * delta;
        if (this.lightValue < 1) {
          this.lightValue = 0;
          this.turnOff();
        } else {
          this.viewRadius = this.lightValue;
        }
      } else {
        this.viewRadius = this.maxDarkRadius;
      }
      return this.viewRadius = Math.pow(this.viewRadius, 0.333) * 40;
    };

    Light.prototype.turnOff = function(time) {
      if (time == null) {
        time = 2.0;
      }
      this.on = false;
      this.viewRadius = 0;
      this.alpha = 0.0;
      this.tweenTo(time, this.maxDarkRadius, 0.4);
      this.lightEl.style.display = 'none';
      return true;
    };

    Light.prototype.turnOn = function(time) {
      if (time == null) {
        time = 1.0;
      }
      if (this.lightValue < 1) {
        return false;
      }
      this.on = true;
      this.tweenTo(time, this.lightValue, 1.0);
      this.lightEl.style.display = 'block';
      return true;
    };

    Light.prototype.tweenTo = function(time, radius, alpha) {
      this.tweenTimePassed = 0;
      this.tweenTime = time;
      this.tweening = true;
      this.tweenStartRadius = Math.pow(this.viewRadius / 40, 1 / 0.333);
      this.tweenTargetRadius = radius;
      this.tweenStartAlpha = this.alpha;
      return this.tweenTargetAlpha = alpha;
    };

    Light.prototype.addPower = function() {
      this.lightValue += 90;
      return this.turnOn(1.0);
    };

    return Light;

  })();

  Msg = {
    init: function(ctx, originX, originY) {
      this.ctx = ctx;
      this.originX = originX;
      this.originY = originY;
      this.messages = [];
      this.list = [];
      return this.maxTime = 10;
    },
    update: function(delta) {
      var j, len, msg, ref, results;
      ref = this.messages;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        msg = ref[j];
        if (msg.hold > 0) {
          results.push(msg.hold -= delta);
        } else if (msg.fade > 0) {
          results.push(msg.fade -= delta);
        } else {
          results.push(void 0);
        }
      }
      return results;
    },
    draw: function() {
      var j, len, msg, ref, results;
      ref = this.messages;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        msg = ref[j];
        if (msg.fade > 0) {
          if (msg.hold <= 0) {
            this.ctx.globalAlpha = msg.fade / msg.fadeTime;
          }
          this.ctx.fillStyle = msg.colour;
          this.ctx.font = msg.font;
          this.ctx.fillText(msg.txt, msg.x, msg.y);
          results.push(this.ctx.globalAlpha = 1.0);
        } else {
          results.push(void 0);
        }
      }
      return results;
    },
    say: function(text, args) {
      var gap, i, j, k, len, len1, line, lines, m, msg, ref, results;
      if (args == null) {
        args = {};
      }
      lines = text.split('|');
      args.colour || (args.colour = 'white');
      args.x || (args.x = this.originX - 235);
      args.y || (args.y = 0);
      args.size || (args.size = 18);
      args.hold || (args.hold = 2);
      args.fade || (args.fade = 10);
      results = [];
      for (i = j = 0, len = lines.length; j < len; i = ++j) {
        line = lines[i];
        msg = {
          txt: line,
          colour: args.colour,
          size: args.size,
          font: args.size + "px sans-serif",
          x: this.originX + args.x,
          y: this.originY + args.y,
          hold: args.hold,
          fade: args.fade,
          fadeTime: args.fade
        };
        this.messages.push(msg);
        if (!args.y) {
          gap = msg.size + 5;
          if (i === 0) {
            gap += 20;
          }
          ref = this.list;
          for (k = 0, len1 = ref.length; k < len1; k++) {
            m = ref[k];
            m.y -= gap;
          }
          results.push(this.list.push(msg));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

  window.Light = Light;

  window.Msg = Msg;

}).call(this);
