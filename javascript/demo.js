// Generated by CoffeeScript 1.12.5
(function() {
  var Game;

  Game = (function() {
    function Game() {
      this.canvas = document.getElementById('light-mask');
      this.ctx = this.canvas.getContext('2d');
      this.pos = {
        x: 10,
        y: 10
      };
      this.changed = true;
      this.points = [];
      this.initPoints();
    }

    Game.prototype.update = function(timestamp) {
      var delta;
      if (this.lastTimestamp) {
        delta = (timestamp - this.lastTimestamp) / 1000;
      } else {
        delta = 0;
      }
      this.lastTimestamp = timestamp;
      return this.draw(delta);
    };

    Game.prototype.draw = function(delta) {
      if (!this.changed) {
        return false;
      }
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      this.drawOrb();
      this.drawPointRays();
      this.drawPoints();
      return this.changed = false;
    };

    Game.prototype.drawOrb = function() {
      this.ctx.fillStyle = '#0ff';
      this.ctx.beginPath();
      this.ctx.arc(this.pos.x, this.pos.y, 10, 0, Math.PI * 2);
      return this.ctx.fill();
    };

    Game.prototype.drawPoints = function() {
      var j, len, p, ref, results;
      this.ctx.fillStyle = '#008';
      ref = this.points;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        this.ctx.beginPath();
        this.ctx.arc(p.x, p.y, 1, 0, Math.PI * 2);
        results.push(this.ctx.fill());
      }
      return results;
    };

    Game.prototype.drawPointRays = function() {
      var angDist, endPoint, j, len, p, ref;
      this.ctx.strokeStyle = '#080';
      this.ctx.beginPath();
      ref = this.points;
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        angDist = Vectors.angleDistBetweenPoints(this.pos, p);
        if (angDist.distance < 100) {
          endPoint = Vectors.addVectorToPoint(p, angDist.angle, 200);
          this.ctx.moveTo(p.x, p.y);
          this.ctx.lineTo(endPoint.x, endPoint.y);
        }
      }
      return this.ctx.stroke();
    };

    Game.prototype.updateMousePos = function(e) {
      game.pos.x = e.pageX;
      game.pos.y = e.pageY;
      return game.changed = true;
    };

    Game.prototype.initPoints = function() {
      var i, j, results;
      results = [];
      for (i = j = 0; j <= 999; i = ++j) {
        results.push(this.points[i] = {
          x: randInt(50, 1580),
          y: randInt(50, 850)
        });
      }
      return results;
    };

    return Game;

  })();

  window.randInt = function(min, range) {
    return Math.floor(Math.random() * range) + min;
  };

  window.update = function(timestamp) {
    game.update(timestamp);
    window.requestAnimationFrame(update);
    return true;
  };

  window.initGame = function() {
    window.game = new Game();
    window.requestAnimationFrame(update);
    return document.onmousemove = game.updateMousePos;
  };

  window.Game = Game;

}).call(this);
