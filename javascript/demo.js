// Generated by CoffeeScript 1.12.5
(function() {
  var Game;

  Game = (function() {
    function Game(mapParams, gameParams) {
      this.map = new Map('map', mapParams);
      this.map.canvas.style.width = this.map.canvas.width + 'px';
      this.map.draw();
      this.tileSize = this.map.tileSize;
      this.playerEl = byId('player');
      this.lightEl = byId('light');
      this.light = new Light(this.lightEl);
      this.initGameParams(gameParams);
      this.shadowCanvas = document.createElement('canvas');
      this.shadowCtx = this.shadowCanvas.getContext('2d');
      this.maskCanvas = byId('light-mask');
      this.maskCtx = this.maskCanvas.getContext('2d');
      this.viewCanvas = byId('view');
      this.viewCtx = this.viewCanvas.getContext('2d');
      this.shadowCanvas.width = (this.map.w + 1) * this.tileSize;
      this.shadowCanvas.height = (this.map.h + 1) * this.tileSize;
      this.maskCanvas.width = Math.floor(window.innerWidth / pixels);
      this.maskCanvas.height = Math.floor(window.innerHeight / pixels);
      this.maskCanvas.style.width = window.innerWidth + 'px';
      this.maskCanvas.style.height = window.innerHeight + 'px';
      this.viewCanvas.width = Math.floor(window.innerWidth / pixels);
      this.viewCanvas.height = Math.floor(window.innerHeight / pixels);
      this.viewCanvas.style.width = window.innerWidth + 'px';
      this.viewCanvas.style.height = window.innerHeight + 'px';
      this.viewCtx.translate(0.5, 0.5);
      this.maskCtx.fillStyle = '#000';
      this.maskCtx.fillRect(0, 0, this.maskCanvas.width, this.maskCanvas.height);
      this.gameWorld = byId('gameworld');
      this.pos = this.tilePosToGameXY(gameParams.start);
      this.changed = true;
      this.lines = [];
      this.speed = 125;
      this.playerEl.style.left = ((window.innerWidth - 60) / 2) + "px";
      this.playerEl.style.top = ((window.innerHeight - 48) / 2) + "px";
      this.lightEl.style.left = ((window.innerWidth - 60) / 2) + "px";
      this.lightEl.style.top = ((window.innerHeight - 48) / 2) + "px";
      this.initLines();
      this.light.turnOff();
      openingText();
      setTimeout((function() {
        return window.requestAnimationFrame(update);
      }), 1000);
    }

    Game.prototype.update = function(timestamp) {
      var delta, newPos, pixel, testRange;
      if (this.lastTimestamp) {
        delta = (timestamp - this.lastTimestamp) / 1000;
      } else {
        delta = 0;
      }
      this.lastTimestamp = timestamp;
      this.light.update(delta);
      this.changed = true;
      if (right || left || up || down) {
        testRange = 24 / pixels;
        newPos = {
          x: this.pos.x,
          y: this.pos.y
        };
        if (right) {
          newPos.x = this.pos.x + this.speed * delta;
          pixel = this.map.pixelAt(Math.floor(newPos.x) + testRange, Math.floor(newPos.y));
          if (pixel[3] < 10) {
            this.pos.x = newPos.x;
          }
          this.playerEl.className = 'right';
        }
        if (left) {
          newPos.x = this.pos.x - this.speed * delta;
          pixel = this.map.pixelAt(Math.floor(newPos.x) - testRange, Math.floor(newPos.y));
          if (pixel[3] < 10) {
            this.pos.x = newPos.x;
          }
          this.playerEl.className = 'left';
        }
        if (down) {
          newPos.y = this.pos.y + this.speed * delta;
          pixel = this.map.pixelAt(Math.floor(newPos.x), Math.floor(newPos.y) + testRange);
          if (pixel[3] < 10) {
            this.pos.y = newPos.y;
          }
          this.playerEl.className = 'down';
        }
        if (up) {
          newPos.y = this.pos.y - this.speed * delta;
          pixel = this.map.pixelAt(Math.floor(newPos.x), Math.floor(newPos.y) - testRange);
          if (pixel[3] < 10) {
            this.pos.y = newPos.y;
          }
          this.playerEl.className = 'up';
        }
        this.lightEl.className = this.playerEl.className;
        this.changed = true;
      }
      if (window.toggleLight) {
        if (this.light.on) {
          this.light.turnOff();
        } else {
          this.light.turnOn();
        }
        window.toggleLight = false;
        this.changed = true;
      }
      this.playerTouchingOrb();
      return this.draw(delta);
    };

    Game.prototype.draw = function(delta) {
      if (!this.changed) {
        return false;
      }
      this.shadowCtx.clearRect(0, 0, this.shadowCanvas.width, this.shadowCanvas.height);
      this.drawOrbs();
      this.drawMonsters();
      if (this.light.on) {
        this.drawLineShadows();
      }
      this.positionMap();
      this.drawPlayerShadow();
      this.drawExit(this.shadowCtx);
      this.drawLightMask();
      this.compositeCanvas();
      return this.changed = false;
    };

    Game.prototype.compositeCanvas = function() {
      game.viewCtx.drawImage(this.map.floorCanvas, this.viewX - this.pos.x, this.viewY - this.pos.y);
      game.viewCtx.drawImage(this.shadowCanvas, this.viewX - this.pos.x, this.viewY - this.pos.y);
      game.viewCtx.drawImage(this.map.canvas, this.viewX - this.pos.x, this.viewY - this.pos.y);
      return game.drawExit(game.viewCtx);
    };

    Game.prototype.drawPlayerShadow = function() {
      var grd, radius;
      radius = 24 / pixels;
      this.shadowCtx.save();
      this.shadowCtx.translate(this.pos.x, this.pos.y + 24 / pixels);
      this.shadowCtx.scale(1, 0.25);
      grd = this.shadowCtx.createRadialGradient(0, 0, 0, 0, 0, radius);
      grd.addColorStop(0, 'rgba(0,0,0,0.6)');
      grd.addColorStop(1, 'rgba(0,0,0,0)');
      this.shadowCtx.fillStyle = grd;
      this.shadowCtx.beginPath();
      this.shadowCtx.arc(0, 0, radius, 0, Math.PI * 2);
      this.shadowCtx.fill();
      return this.shadowCtx.restore();
    };

    Game.prototype.playerTouchingOrb = function() {
      var i, j, len, orb, ref, results;
      ref = this.orbs;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        orb = ref[i];
        if (this.itemInRange(orb, this.tileSize) && !orb.used) {
          this.light.addPower();
          results.push(orb.used = true);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Game.prototype.drawOrbs = function() {
      var glowGradient, glowRadius, j, len, orb, orbGradient, orbRadius, ref, results, shadowGradient;
      glowRadius = 15;
      orbRadius = 4;
      glowGradient = this.shadowCtx.createRadialGradient(0, 0, orbRadius, 0, 0, glowRadius);
      glowGradient.addColorStop(0, 'rgba(143,194,242,0.4)');
      glowGradient.addColorStop(1, 'rgba(191,226,226,0)');
      orbGradient = this.shadowCtx.createRadialGradient(1, -1, 1, 0, 0, orbRadius);
      orbGradient.addColorStop(0, '#bfe2e2');
      orbGradient.addColorStop(1, '#8fc2f2');
      shadowGradient = this.shadowCtx.createRadialGradient(0, 0, 0, 0, 0, glowRadius);
      shadowGradient.addColorStop(0, 'rgba(191,226,226,0.4)');
      shadowGradient.addColorStop(0.2, 'rgba(143,194,242,0.4)');
      shadowGradient.addColorStop(1, 'rgba(143,194,242,0)');
      ref = this.orbs;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        orb = ref[j];
        if (this.itemInRange(orb, 800) && !orb.used) {
          this.shadowCtx.save();
          this.shadowCtx.translate(orb.x, orb.y + 10);
          this.shadowCtx.scale(1, 0.3);
          this.shadowCtx.fillStyle = shadowGradient;
          this.shadowCtx.beginPath();
          this.shadowCtx.arc(0, 0, glowRadius, 0, Math.PI * 2);
          this.shadowCtx.fill();
          this.shadowCtx.restore();
          this.shadowCtx.save();
          this.shadowCtx.translate(orb.x, orb.y);
          this.shadowCtx.fillStyle = glowGradient;
          this.shadowCtx.beginPath();
          this.shadowCtx.arc(0, 0, glowRadius, 0, Math.PI * 2);
          this.shadowCtx.fill();
          this.shadowCtx.fillStyle = orbGradient;
          this.shadowCtx.beginPath();
          this.shadowCtx.arc(0, 0, orbRadius, 0, Math.PI * 2);
          this.shadowCtx.fill();
          results.push(this.shadowCtx.restore());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Game.prototype.drawMonsters = function() {
      var angDist, j, len, monster, radius, ref, results;
      radius = 12;
      ref = this.monsters;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        monster = ref[j];
        if (this.itemInRange(monster, 800)) {
          angDist = Vectors.angleDistBetweenPoints(this.pos, monster);
          this.shadowCtx.save();
          this.shadowCtx.translate(monster.x, monster.y);
          this.shadowCtx.rotate(angDist.angle);
          this.shadowCtx.fillStyle = '#000';
          this.shadowCtx.beginPath();
          this.shadowCtx.arc(0, 0, radius, 0, Math.PI * 2);
          this.shadowCtx.fill();
          this.shadowCtx.fillStyle = '#f20';
          this.shadowCtx.beginPath();
          this.shadowCtx.arc(-8, 3, 2, 0, Math.PI * 2);
          this.shadowCtx.arc(-8, -3, 2, 0, Math.PI * 2);
          this.shadowCtx.fill();
          results.push(this.shadowCtx.restore());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Game.prototype.itemInRange = function(pos, range) {
      return (Math.abs(pos.x - this.pos.x) < range) && (Math.abs(pos.y - this.pos.y) < range);
    };

    Game.prototype.drawPoints = function() {
      var j, len, p, ref, results;
      this.shadowCtx.fillStyle = '#008';
      ref = this.points;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        this.shadowCtx.beginPath();
        this.shadowCtx.arc(p.x, p.y, 1, 0, Math.PI * 2);
        results.push(this.shadowCtx.fill());
      }
      return results;
    };

    Game.prototype.drawPointRays = function() {
      var angDist, endPoint, j, len, p, ref;
      this.shadowCtx.strokeStyle = '#080';
      this.shadowCtx.beginPath();
      ref = this.points;
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        angDist = Vectors.angleDistBetweenPoints(this.pos, p);
        if (angDist.distance < 100) {
          endPoint = Vectors.addVectorToPoint(p, angDist.angle, 200);
          this.shadowCtx.moveTo(p.x, p.y);
          this.shadowCtx.lineTo(endPoint.x, endPoint.y);
        }
      }
      return this.shadowCtx.stroke();
    };

    Game.prototype.drawLines = function() {
      var j, l, len, ref;
      this.shadowCtx.strokeStyle = '#800';
      this.shadowCtx.beginPath();
      ref = this.lines;
      for (j = 0, len = ref.length; j < len; j++) {
        l = ref[j];
        this.shadowCtx.moveTo(l[0].x, l[0].y);
        this.shadowCtx.lineTo(l[1].x, l[1].y);
      }
      return this.shadowCtx.stroke();
    };

    Game.prototype.drawLineShadows = function() {
      var angDist1, angDist2, angle, delta, drawLines, j, k, l, len, len1, lineCheckDist, p1, p2, ref, shadowDrawRadius;
      lineCheckDist = 500;
      shadowDrawRadius = 100;
      this.shadowCtx.lineWidth = 3;
      drawLines = [];
      ref = this.lines;
      for (j = 0, len = ref.length; j < len; j++) {
        l = ref[j];
        if ((Math.abs(l[0].x - this.pos.x) < lineCheckDist) && (Math.abs(l[0].y - this.pos.y) < lineCheckDist)) {
          drawLines.push(l);
        }
        this.shadowCtx.strokeStyle = '#888685';
        this.shadowCtx.beginPath();
        this.shadowCtx.moveTo(l[0].x, l[0].y);
        this.shadowCtx.lineTo(l[1].x, l[1].y);
        this.shadowCtx.stroke();
      }
      this.shadowCtx.fillStyle = 'rgba(0,0,0,0.7)';
      this.shadowCtx.strokeStyle = 'rgba(0,0,0,0.7)';
      this.shadowCtx.lineWidth = 0.5;
      for (k = 0, len1 = drawLines.length; k < len1; k++) {
        l = drawLines[k];
        p1 = l[0];
        p2 = l[1];
        angDist1 = Vectors.angleDistBetweenPoints(this.pos, p1);
        angDist2 = Vectors.angleDistBetweenPoints(this.pos, p2);
        if (angDist1.distance < shadowDrawRadius || angDist2.distance < shadowDrawRadius) {
          if (l[2]) {
            angle = angDist1.angle;
            delta = angle - l[2].ang;
            if (delta < Math.PI) {
              delta += Math.PI * 2;
            }
            if (delta > Math.PI) {
              delta -= Math.PI * 2;
            }
            if (delta < 0) {
              this.drawShadow(p1, p2, angDist1.angle, angDist2.angle);
            }
          }
        }
      }
      return this.shadowCtx.lineWidth = 1;
    };

    Game.prototype.drawShadow = function(p1, p2, ang1, ang2) {
      var end1, end2;
      this.shadowCtx.beginPath();
      end1 = Vectors.addVectorToPoint(p1, ang1, 900);
      end2 = Vectors.addVectorToPoint(p2, ang2, 900);
      this.shadowCtx.moveTo(p1.x, p1.y);
      this.shadowCtx.lineTo(end1.x, end1.y);
      this.shadowCtx.lineTo(end2.x, end2.y);
      this.shadowCtx.lineTo(p2.x, p2.y);
      this.shadowCtx.lineTo(p1.x, p1.y);
      this.shadowCtx.fill();
      this.shadowCtx.beginPath();
      this.shadowCtx.moveTo(p1.x, p1.y);
      this.shadowCtx.lineTo(end1.x, end1.y);
      return this.shadowCtx.stroke();
    };

    Game.prototype.drawLightMask = function() {
      var grd, radius;
      this.maskCtx.fillStyle = "#000";
      radius = this.light.viewRadius;
      grd = this.maskCtx.createRadialGradient(this.viewX, this.viewY, radius / 4, this.viewX, this.viewY, radius);
      grd.addColorStop(0, "rgba(255,255,255," + this.light.alpha + ")");
      grd.addColorStop(1, 'rgba(255,255,255,0)');
      this.maskCtx.fillRect(0, 0, this.maskCanvas.width, this.maskCanvas.height);
      this.maskCtx.globalCompositeOperation = 'destination-out';
      this.maskCtx.fillStyle = grd;
      this.maskCtx.beginPath();
      this.maskCtx.arc(this.viewX, this.viewY, radius, 0, Math.PI * 2);
      this.maskCtx.fill();
      this.maskCtx.globalCompositeOperation = 'source-over';
      if (false) {
        this.maskCtx.strokeStyle = 'red';
        this.maskCtx.lineWidth = 5;
        this.maskCtx.beginPath();
        this.maskCtx.arc(this.viewX, this.viewY, radius, 0, Math.PI * 2);
        this.maskCtx.stroke();
        return this.maskCtx.lineWidth = 1;
      }
    };

    Game.prototype.drawExit = function(ctx) {
      var grd, i, j, k, len, radius, ray, ref, x;
      if (this.itemInRange(this.exit)) {
        radius = 2 * this.tileSize / pixels;
        if (!this.lightRays) {
          this.lightRays = [];
          for (i = j = 0; j <= 5; i = ++j) {
            x = randInt(-radius, radius * 2);
            this.lightRays.push({
              x: x,
              y: randInt(-7, 14),
              w: randInt(2, radius - x),
              h: randInt(100, 50)
            });
          }
          console.log(this.lightRays);
        }
        ctx.save();
        ctx.translate(this.exit.x, this.exit.y);
        ctx.scale(1, 0.4);
        grd = ctx.createRadialGradient(0, 0, 0, 0, 0, radius);
        grd.addColorStop(0, 'rgba(255, 255, 255, 0.9)');
        grd.addColorStop(1, 'rgba(255, 255, 255, 0.2)');
        ctx.fillStyle = grd;
        ctx.beginPath();
        ctx.arc(0, 0, radius, 0, Math.PI * 2);
        ctx.fill();
        ctx.restore();
        ctx.save();
        ctx.translate(this.exit.x, this.exit.y);
        ref = this.lightRays;
        for (k = 0, len = ref.length; k < len; k++) {
          ray = ref[k];
          grd = ctx.createLinearGradient(ray.x, ray.y, ray.x, ray.y - ray.h);
          grd.addColorStop(0, "rgba(255, 255, 255, " + (0.3 + Math.random() / 5) + ")");
          grd.addColorStop(1, 'rgba(255, 255, 255, 0)');
          ctx.fillStyle = grd;
          ctx.beginPath();
          ctx.moveTo(ray.x, ray.y);
          ctx.lineTo(ray.x - 0.2 * ray.h, ray.y - ray.h);
          ctx.lineTo(ray.x - 0.2 * ray.h + ray.w, ray.y - ray.h);
          ctx.lineTo(ray.x + ray.w, ray.y);
          ctx.fill();
        }
        return ctx.restore();
      }
    };

    Game.prototype.updateMousePos = function(e) {
      game.pos.x = e.pageX;
      game.pos.y = e.pageY - 10;
      return game.changed = true;
    };

    Game.prototype.initPoints = function() {
      var i, j, results;
      results = [];
      for (i = j = 0; j <= 999; i = ++j) {
        results.push(this.points[i] = {
          x: randInt(50, 1580),
          y: randInt(50, 850)
        });
      }
      return results;
    };

    Game.prototype.initLines = function() {
      return this.lines = this.map.lines();
    };

    Game.prototype.positionMap = function() {
      this.viewX = window.innerWidth / 2 / pixels;
      this.viewY = window.innerHeight / 2 / pixels;
      this.gameWorld.style.left = this.viewX - this.pos.x + 'px';
      return this.gameWorld.style.top = this.viewY - this.pos.y + 'px';
    };

    Game.prototype.initGameParams = function(params) {
      var j, k, len, len1, monster, pos, ref, ref1, results;
      this.monsters = [];
      this.orbs = [];
      this.exit = this.tilePosToGameXY(params.exit);
      ref = params.monsters;
      for (j = 0, len = ref.length; j < len; j++) {
        pos = ref[j];
        monster = this.tilePosToGameXY(pos);
        monster.state = 0;
        this.monsters.push(monster);
      }
      ref1 = params.orbs;
      results = [];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        pos = ref1[k];
        results.push(this.orbs.push(this.tilePosToGameXY(pos)));
      }
      return results;
    };

    Game.prototype.tilePosToGameXY = function(xy) {
      return {
        x: (xy[0] + .5) * this.tileSize,
        y: (xy[1] + .5) * this.tileSize
      };
    };

    return Game;

  })();

  window.say = function(msg, holdTime, delay) {
    var el, o;
    msg = msg.replace(/\s/g, '&nbsp;').replace("'", '&rsquo;');
    holdTime = 2000 + holdTime * 1000;
    el = document.createElement('span');
    el.innerHTML = msg;
    el.className = 'text fade-in';
    o = document.getElementById('overlay');
    o.appendChild(el);
    setTimeout((function() {
      return el.className = 'text';
    }), 100);
    setTimeout((function() {
      return el.className = 'text fade-out';
    }), holdTime);
    return setTimeout((function() {
      return o.removeChild(el);
    }), holdTime + 10000);
  };

  window.saySoon = function(msg, holdTime, delay) {
    return setTimeout((function() {
      return say(msg, holdTime);
    }), delay * 1000);
  };

  window.openingText = function() {
    var j, len, messages, msg, results;
    messages = [['. . .', -.2, 1], ["It's dark,              ", 1, 5], ["             isn't it?", 0, 6]];
    results = [];
    for (j = 0, len = messages.length; j < len; j++) {
      msg = messages[j];
      results.push(saySoon(msg[0], msg[1], msg[2]));
    }
    return results;
  };

  window.randSeed = Math.floor(Math.random() * 10000);

  window.randomX = function() {
    var x;
    x = Math.sin(randSeed++) * 10000;
    return x - Math.floor(x);
  };

  window.randInt = function(min, range) {
    return Math.floor(randomX() * range) + min;
  };

  window.update = function(timestamp) {
    game.update(timestamp);
    window.requestAnimationFrame(update);
    return true;
  };

  window.byId = function(elementId) {
    return document.getElementById(elementId);
  };

  window.debug = function(msg) {
    return document.getElementById('debug').innerHTML = msg;
  };

  window.up = window.right = window.down = window.left = false;

  window.onkeydown = function(e) {
    if (e.keyCode === 32) {
      window.toggleLight = true;
    }
    if (e.keyCode === 38 || e.keyCode === 90 || e.keyCode === 87) {
      window.up = true;
    }
    if (e.keyCode === 39 || e.keyCode === 68) {
      window.right = true;
    }
    if (e.keyCode === 40 || e.keyCode === 83) {
      window.down = true;
    }
    if (e.keyCode === 37 || e.keyCode === 65 || e.keyCode === 81) {
      return window.left = true;
    }
  };

  window.onkeyup = function(e) {
    if (e.keyCode === 38 || e.keyCode === 90 || e.keyCode === 87) {
      window.up = false;
    }
    if (e.keyCode === 39 || e.keyCode === 68) {
      window.right = false;
    }
    if (e.keyCode === 40 || e.keyCode === 83) {
      window.down = false;
    }
    if (e.keyCode === 37 || e.keyCode === 65 || e.keyCode === 81) {
      return window.left = false;
    }
  };

  window.initGame = function() {
    var gameParams, mapParams;
    mapParams = {
      seed: 559516,
      width: 120,
      height: 80,
      tileSize: 25,
      initialDensity: 47,
      reseedDensity: 51,
      smoothCorners: true,
      reseedMethod: 'top',
      emptyTolerance: 6,
      wallRoughness: 25,
      passes: ["combine-aggressive", "reseed-medium", "combine-aggressive", "reseed-small", "combine-aggressive", "remove-singles"]
    };
    gameParams = {
      start: [40, 23],
      exit: [37, 21],
      monsters: [[32, 49], [80, 18], [102, 19], [62, 21], [76, 38], [57, 24], [113, 72], [116, 75], [117, 72], [115, 63], [73, 67], [49, 72], [5, 70], [13, 35], [49, 75], [97, 70], [86, 12], [63, 59], [91, 22]],
      orbs: [[50, 37], [60, 61], [35, 33], [24, 75], [10, 65], [10, 62], [18, 48], [105, 77], [114, 50], [116, 16], [102, 27], [49, 29], [73, 38], [80, 5], [79, 72], [101, 58], [5, 24], [91, 34]]
    };
    window.pixels = 2;
    return window.game = new Game(mapParams, gameParams);
  };

  window.Game = Game;

}).call(this);
