// Generated by CoffeeScript 1.12.5
(function() {
  var Game;

  Game = (function() {
    function Game(mapParams, gameParams) {
      this.map = new Map('map', mapParams);
      this.map.canvas.style.width = this.map.canvas.width + 'px';
      this.map.draw();
      this.shadowCanvas = document.createElement('canvas');
      this.shadowCtx = this.shadowCanvas.getContext('2d');
      this.maskCanvas = document.getElementById('light-mask');
      this.maskCtx = this.maskCanvas.getContext('2d');
      this.viewCanvas = document.getElementById('view');
      this.viewCtx = this.viewCanvas.getContext('2d');
      this.shadowCanvas.width = (this.map.w + 1) * this.map.tileSize;
      this.shadowCanvas.height = (this.map.h + 1) * this.map.tileSize;
      this.maskCanvas.width = window.innerWidth;
      this.maskCanvas.height = window.innerHeight;
      this.viewCanvas.width = window.innerWidth;
      this.viewCanvas.height = window.innerHeight;
      this.maskCtx.fillStyle = '#000';
      this.maskCtx.fillRect(0, 0, this.maskCanvas.width, this.maskCanvas.height);
      this.gameWorld = byId('gameworld');
      this.pos = {
        x: gameParams.startPos[0] * mapParams.tileSize,
        y: gameParams.startPos[1] * mapParams.tileSize
      };
      this.changed = true;
      this.lines = [];
      this.speed = 200;
      this.lightRadius = 500;
      this.nightVisionRadius = 0;
      this.maxNightVisionRadius = 200;
      this.nightVisionChangeRate = 10;
      this.lightOn = false;
      this.initLines();
      this.turnLightOn();
      this.turnLightOff();
      openingText();
      setTimeout((function() {
        return window.requestAnimationFrame(update);
      }), 1000);
    }

    Game.prototype.update = function(timestamp) {
      var delta, newPos, pixel, testRange;
      if (this.lastTimestamp) {
        delta = (timestamp - this.lastTimestamp) / 1000;
      } else {
        delta = 0;
      }
      this.lastTimestamp = timestamp;
      this.lightOffTween.update(delta);
      this.lightOnTween.update(delta);
      if (!this.lightOn) {
        if (this.nightVisionRadius < this.maxNightVisionRadius) {
          this.changed = true;
          this.nightVisionRadius += this.nightVisionChangeRate * delta;
          if (this.nightVisionRadius > this.maxNightVisionRadius) {
            this.nightVisionRadius = this.maxNightVisionRadius;
          }
        }
      }
      if (right || left || up || down) {
        testRange = 9;
        newPos = {
          x: this.pos.x,
          y: this.pos.y
        };
        if (right) {
          newPos.x = this.pos.x + this.speed * delta;
          pixel = this.map.pixelAt(Math.floor(newPos.x) + testRange, Math.floor(newPos.y));
          if (pixel[3] < 10) {
            this.pos.x = newPos.x;
          }
        }
        if (left) {
          newPos.x = this.pos.x - this.speed * delta;
          pixel = this.map.pixelAt(Math.floor(newPos.x) - testRange, Math.floor(newPos.y));
          if (pixel[3] < 10) {
            this.pos.x = newPos.x;
          }
        }
        if (down) {
          newPos.y = this.pos.y + this.speed * delta;
          pixel = this.map.pixelAt(Math.floor(newPos.x), Math.floor(newPos.y) + testRange);
          if (pixel[3] < 10) {
            this.pos.y = newPos.y;
          }
        }
        if (up) {
          newPos.y = this.pos.y - this.speed * delta;
          pixel = this.map.pixelAt(Math.floor(newPos.x), Math.floor(newPos.y) - testRange);
          if (pixel[3] < 10) {
            this.pos.y = newPos.y;
          }
        }
        this.changed = true;
      }
      if (window.toggleLight) {
        if (this.lightOn) {
          this.turnLightOff();
        } else {
          this.turnLightOn();
        }
        window.toggleLight = false;
        this.changed = true;
      }
      return this.draw(delta);
    };

    Game.prototype.turnLightOn = function() {
      this.lightOn = true;
      return this.lightOnTween = new Tween(3.0, {
        rgb: [200, 0],
        r: [10, this.lightRadius],
        a: [0.0, 1.0]
      });
    };

    Game.prototype.turnLightOff = function() {
      this.lightOn = false;
      this.lightOffTween = new Tween(3.0, {
        rgb: [0, 0],
        r: [0, 200],
        a: [0, 0.4]
      });
      return window.lit = this.lightOffTween;
    };

    Game.prototype.draw = function(delta) {
      this.shadowCtx.clearRect(0, 0, this.shadowCanvas.width, this.shadowCanvas.height);
      this.drawOrb();
      if (this.lightOn) {
        this.drawLineShadows();
      }
      this.positionMap();
      this.drawLightMask();
      this.compositeCanvas();
      return this.changed = false;
    };

    Game.prototype.compositeCanvas = function() {
      game.viewCtx.drawImage(this.map.floorCanvas, this.viewX - this.pos.x, this.viewY - this.pos.y);
      game.viewCtx.drawImage(this.shadowCanvas, this.viewX - this.pos.x, this.viewY - this.pos.y);
      return game.viewCtx.drawImage(this.map.canvas, this.viewX - this.pos.x, this.viewY - this.pos.y);
    };

    Game.prototype.drawOrb = function() {
      var grd, radius;
      radius = 20;
      if (this.lightOn) {
        grd = this.maskCtx.createRadialGradient(this.pos.x, this.pos.y, 10, this.pos.x, this.pos.y, radius);
        grd.addColorStop(0, 'rgba(60,255,255,0.4)');
        grd.addColorStop(0.5, 'rgba(60,255,255,0.2)');
        grd.addColorStop(1, 'rgba(60,255,255,0)');
        this.shadowCtx.fillStyle = grd;
        this.shadowCtx.beginPath();
        this.shadowCtx.arc(this.pos.x, this.pos.y, radius, 0, Math.PI * 2);
        this.shadowCtx.fill();
        grd = this.maskCtx.createRadialGradient(this.pos.x + 3, this.pos.y - 3, 2, this.pos.x, this.pos.y, 7);
        grd.addColorStop(0, '#fff');
        grd.addColorStop(1, '#0ff');
        this.shadowCtx.fillStyle = grd;
        this.shadowCtx.beginPath();
        this.shadowCtx.arc(this.pos.x, this.pos.y, 7, 0, Math.PI * 2);
        this.shadowCtx.fill();
        this.shadowCtx.strokeStyle = '#fff';
        this.shadowCtx.beginPath();
        this.shadowCtx.arc(this.pos.x, this.pos.y, 8, 0, Math.PI * 2);
        return this.shadowCtx.stroke();
      } else {
        this.shadowCtx.strokeStyle = '#066';
        this.shadowCtx.fillStyle = '#288';
        this.shadowCtx.beginPath();
        this.shadowCtx.arc(this.pos.x, this.pos.y, 8, 0, Math.PI * 2);
        this.shadowCtx.stroke();
        return this.shadowCtx.fill();
      }
    };

    Game.prototype.drawPoints = function() {
      var j, len, p, ref, results;
      this.shadowCtx.fillStyle = '#008';
      ref = this.points;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        this.shadowCtx.beginPath();
        this.shadowCtx.arc(p.x, p.y, 1, 0, Math.PI * 2);
        results.push(this.shadowCtx.fill());
      }
      return results;
    };

    Game.prototype.drawPointRays = function() {
      var angDist, endPoint, j, len, p, ref;
      this.shadowCtx.strokeStyle = '#080';
      this.shadowCtx.beginPath();
      ref = this.points;
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        angDist = Vectors.angleDistBetweenPoints(this.pos, p);
        if (angDist.distance < 100) {
          endPoint = Vectors.addVectorToPoint(p, angDist.angle, 200);
          this.shadowCtx.moveTo(p.x, p.y);
          this.shadowCtx.lineTo(endPoint.x, endPoint.y);
        }
      }
      return this.shadowCtx.stroke();
    };

    Game.prototype.drawLines = function() {
      var j, l, len, ref;
      this.shadowCtx.strokeStyle = '#800';
      this.shadowCtx.beginPath();
      ref = this.lines;
      for (j = 0, len = ref.length; j < len; j++) {
        l = ref[j];
        this.shadowCtx.moveTo(l[0].x, l[0].y);
        this.shadowCtx.lineTo(l[1].x, l[1].y);
      }
      return this.shadowCtx.stroke();
    };

    Game.prototype.drawLineShadows = function() {
      var angDist1, angDist2, angle, delta, drawLines, j, k, l, len, len1, lineCheckDist, p1, p2, ref;
      lineCheckDist = this.lightRadius + 20;
      this.shadowCtx.lineWidth = 6;
      drawLines = [];
      ref = this.lines;
      for (j = 0, len = ref.length; j < len; j++) {
        l = ref[j];
        if ((Math.abs(l[0].x - this.pos.x) < lineCheckDist) && (Math.abs(l[0].y - this.pos.y) < lineCheckDist)) {
          drawLines.push(l);
        }
        this.shadowCtx.strokeStyle = '#888685';
        this.shadowCtx.beginPath();
        this.shadowCtx.moveTo(l[0].x, l[0].y);
        this.shadowCtx.lineTo(l[1].x, l[1].y);
        this.shadowCtx.stroke();
      }
      for (k = 0, len1 = drawLines.length; k < len1; k++) {
        l = drawLines[k];
        p1 = l[0];
        p2 = l[1];
        angDist1 = Vectors.angleDistBetweenPoints(this.pos, p1);
        angDist2 = Vectors.angleDistBetweenPoints(this.pos, p2);
        if (angDist1.distance < this.lightRadius || angDist2.distance < this.lightRadius) {
          if (l[2]) {
            angle = angDist1.angle;
            delta = angle - l[2].ang;
            if (delta < Math.PI) {
              delta += Math.PI * 2;
            }
            if (delta > Math.PI) {
              delta -= Math.PI * 2;
            }
            if (delta < 0) {
              this.shadowCtx.fillStyle = 'rgba(0,0,0,0.8)';
              this.drawShadow(p1, p2, angDist1.angle, angDist2.angle);
            }
          }
        }
      }
      return this.shadowCtx.lineWidth = 1;
    };

    Game.prototype.drawShadow = function(p1, p2, ang1, ang2) {
      var end1, end2;
      this.shadowCtx.beginPath();
      end1 = Vectors.addVectorToPoint(p1, ang1, 900);
      end2 = Vectors.addVectorToPoint(p2, ang2, 900);
      this.shadowCtx.moveTo(p1.x, p1.y);
      this.shadowCtx.lineTo(end1.x, end1.y);
      this.shadowCtx.lineTo(end2.x, end2.y);
      this.shadowCtx.lineTo(p2.x, p2.y);
      this.shadowCtx.lineTo(p1.x, p1.y);
      return this.shadowCtx.fill();
    };

    Game.prototype.drawLightMask = function() {
      var grd, radius, rgb, tween;
      if (this.lightOn) {
        tween = this.lightOnTween;
      } else {
        tween = this.lightOffTween;
      }
      rgb = tween.value('rgb');
      this.maskCtx.fillStyle = "rgb(" + rgb + "," + rgb + "," + rgb + ")";
      radius = tween.value('r');
      grd = this.maskCtx.createRadialGradient(this.viewX, this.viewY, radius / 4, this.viewX, this.viewY, radius);
      grd.addColorStop(0, "rgba(255,255,255," + (tween.value('a')) + ")");
      grd.addColorStop(1, 'rgba(255,255,255,0)');
      this.maskCtx.fillRect(0, 0, this.maskCanvas.width, this.maskCanvas.height);
      this.maskCtx.globalCompositeOperation = 'destination-out';
      this.maskCtx.fillStyle = grd;
      this.maskCtx.beginPath();
      this.maskCtx.arc(this.viewX, this.viewY, radius, 0, Math.PI * 2);
      this.maskCtx.fill();
      this.maskCtx.globalCompositeOperation = 'source-over';
      if (false) {
        this.maskCtx.strokeStyle = 'red';
        this.maskCtx.lineWidth = 5;
        this.maskCtx.beginPath();
        this.maskCtx.arc(this.viewX, this.viewY, radius, 0, Math.PI * 2);
        this.maskCtx.stroke();
        return this.maskCtx.lineWidth = 1;
      }
    };

    Game.prototype.updateMousePos = function(e) {
      game.pos.x = e.pageX;
      game.pos.y = e.pageY - 10;
      return game.changed = true;
    };

    Game.prototype.initPoints = function() {
      var i, j, results;
      results = [];
      for (i = j = 0; j <= 999; i = ++j) {
        results.push(this.points[i] = {
          x: randInt(50, 1580),
          y: randInt(50, 850)
        });
      }
      return results;
    };

    Game.prototype.initLines = function() {
      return this.lines = this.map.lines();
    };

    Game.prototype.positionMap = function() {
      this.viewX = window.innerWidth / 2;
      this.viewY = window.innerHeight / 2;
      this.gameWorld.style.left = this.viewX - this.pos.x + 'px';
      return this.gameWorld.style.top = this.viewY - this.pos.y + 'px';
    };

    return Game;

  })();

  window.say = function(msg, holdTime, delay) {
    var el, o;
    msg = msg.replace(/\s/g, '&nbsp;').replace("'", '&rsquo;');
    holdTime = 2000 + holdTime * 1000;
    el = document.createElement('span');
    el.innerHTML = msg;
    el.className = 'text fade-in';
    o = document.getElementById('overlay');
    o.appendChild(el);
    setTimeout((function() {
      return el.className = 'text';
    }), 100);
    setTimeout((function() {
      return el.className = 'text fade-out';
    }), holdTime);
    return setTimeout((function() {
      return o.removeChild(el);
    }), holdTime + 10000);
  };

  window.saySoon = function(msg, holdTime, delay) {
    return setTimeout((function() {
      return say(msg, holdTime);
    }), delay * 1000);
  };

  window.openingText = function() {
    var j, len, messages, msg, results;
    messages = [['. . .', -.2, 1], ["It's dark,              ", 1, 5], ["             isn't it?", 0, 6], ["Don't worry", 0, 10], ["your night vision should return soon", 0, 12]];
    results = [];
    for (j = 0, len = messages.length; j < len; j++) {
      msg = messages[j];
      results.push(saySoon(msg[0], msg[1], msg[2]));
    }
    return results;
  };

  window.randSeed = Math.floor(Math.random() * 10000);

  window.randomX = function() {
    var x;
    x = Math.sin(randSeed++) * 10000;
    return x - Math.floor(x);
  };

  window.randInt = function(min, range) {
    return Math.floor(randomX() * range) + min;
  };

  window.update = function(timestamp) {
    game.update(timestamp);
    window.requestAnimationFrame(update);
    return true;
  };

  window.byId = function(elementId) {
    return document.getElementById(elementId);
  };

  window.debug = function(msg) {
    return document.getElementById('debug').innerHTML = msg;
  };

  window.up = window.right = window.down = window.left = false;

  window.onkeydown = function(e) {
    if (e.keyCode === 32) {
      window.toggleLight = true;
    }
    if (e.keyCode === 38 || e.keyCode === 90 || e.keyCode === 87) {
      window.up = true;
    }
    if (e.keyCode === 39 || e.keyCode === 68) {
      window.right = true;
    }
    if (e.keyCode === 40 || e.keyCode === 83) {
      window.down = true;
    }
    if (e.keyCode === 37 || e.keyCode === 65 || e.keyCode === 81) {
      return window.left = true;
    }
  };

  window.onkeyup = function(e) {
    if (e.keyCode === 38 || e.keyCode === 90 || e.keyCode === 87) {
      window.up = false;
    }
    if (e.keyCode === 39 || e.keyCode === 68) {
      window.right = false;
    }
    if (e.keyCode === 40 || e.keyCode === 83) {
      window.down = false;
    }
    if (e.keyCode === 37 || e.keyCode === 65 || e.keyCode === 81) {
      return window.left = false;
    }
  };

  window.initGame = function() {
    var gameParams, mapParams;
    mapParams = {
      seed: 559516,
      width: 120,
      height: 80,
      tileSize: 50,
      initialDensity: 47,
      reseedDensity: 51,
      smoothCorners: true,
      reseedMethod: 'top',
      emptyTolerance: 6,
      wallRoughness: 25,
      passes: ["combine-aggressive", "reseed-medium", "combine-aggressive", "reseed-small", "combine-aggressive", "remove-singles"]
    };
    gameParams = {
      startPos: [76, 49]
    };
    return window.game = new Game(mapParams, gameParams);
  };

  window.Game = Game;

}).call(this);
